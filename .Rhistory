remove.packages(ImmuneSpaceR)
cd R
getwd()
dir()
cd R
installed.packages()
remove.packages(ImmuneSpaceR)
remove.packages("ImmuneSpaceR")
installed.packages()
install_github("RGLab/ImmuneSpaceR",ref="dev")
installed.packages()
find.package("ImmuneSpaceR")
session_info()
labkey.url.base <- 'test.immunespace.org'
con1 <- CreateConnection()
con1 <- CreateConnection("SDY269")
library(ImmuneSpaceR)
con1 <- CreateConnection("SDY269")
sessionInfo()
library(Rlabkey)
t <- labkey.selectRows(baseUrl = 'test.immunespace.org', folderPath = '/Studies/SDY207', schemaName = 'study', queryName = 'demographics')
traceback()
t <- labkey.selectRows(baseUrl = 'www.immunespace.org', folderPath = '/Studies/SDY207', schemaName = 'study', queryName = 'demographics')
con <- CreateConnection('SDY207')
labkey.base.url
CreateConnection()
CreateConnection
labkey.url.base
labkey.url.base <- 'test.immunespace.org'
con <- CreateConnection('SDY207')
labkey.url.base <- 'www.immunespace.org'
con <- CreateConnection('SDY207')
labkey.url.base <- 'test.immunespace.org'
con <- CreateConnection('SDY207')
labkey.url.base <- 'www.immunespace.org'
con <- CreateConnection('SDY207')
library(DT)
library(BiocInstaller)
biocLite('DT')
library(ImmuneSpaceR)
library(Rlabkey)
getSession(baseUrl = https://www.immunespace.org, folderPath = "/")
labkey.url.base <- "https://www.immunespace.org"
labkey.url.base
getSession(baseUrl = labkey.url.base, folderPath = "/")
labkey.getSchemas(baseUrl = labkey.url.base,folderPath = "/Studies")
labkey.getQueries(baseUrl = labkey.url.base, folderPath = "/Studies", schemaName = "study")
session <- getSession(baseUrl = labkey.url.base, folderPath = "/Studies")
schema <- getSchema(session, "study")
rows <- getRows(session, schema$DataSets)
rows
library(ImmuneSpaceR)
con <- CreateConnection("")
system.time(con$.test_files(mc=TRUE))
library(parallel)
system.time(con$.test_files(mc=TRUE))
library(ImmuneSpaceR)
con <- CreateConnection("")
con$getDataset("Protocol")
library(ImmuneSpaceR)
.self <- CreateConnection("SDY63")
df <- .self$getDataset("fcs_sample_files", original_view = TRUE)
dim(df)
is.null(df)
df
df[1]
df <- .self$getDataset("gene_expression_files", original_view = TRUE)
df
df[`File Info Name`]
df(`File Info Name`)
df(`File Info Name`,)
df[df$file_info_name]
df[df$file_info_name,]
df[,df$file_info_name]
df <- df[!is.na(file_info_name)]
df
nrow(df)
library(ImmuneSpaceR)
library(httr)
library(parallel)
.self <- CreateConnection("SDY269")
test_files=function(what = c("gene_expression_files", "fcs_sample_files", "protocol")){
#-----helper-functions--------
link_test <- function(link){
#url.exists() threw errors due to HTTP request related param values not being present at times, therefore using GET
info <- GET(link)
#status <- info$status_code
ret_text <- content(info, "text")
status <- grepl("Not Found", ret_text)
if(status == TRUE){
status <- 404
}else{
status <- 200
}
return(status)
}
make_protocol_link <- function(study){
link <- paste0(labkey.url.base, "/_webdav/Studies/",
study, "/%40files/protocols/", study,
"_protocol.zip")
return(link)
}
res_table_maker <- function(links_to_test, info_table, numrow, filetype){
http_status <- unlist(mclapply(links_to_test, link_test, mc.cores = detectCores()))
bound_res <- cbind(info_table,http_status)
num_good_links <- length(which(http_status == 200))
print(paste0(num_good_links, "/", numrow, " ", filetype, " with valid links."))
return(bound_res)
}
#Allow for both prod / test work by having baseUrl set through CreateConnection
labkey.url.base <- .self$config$labkey.url.base
print(paste0("testing on ", labkey.url.base))
ret <- list()
what <- tolower(what)
for(i in what){
# handle gene expr / fcs separately from protocols bc similar link construction
# note: error handling applies for single studies that may have no fcs / ge files
# or the files may not have any links in the file_info_name col
if(i == "gene_expression_files" | i == "fcs_sample_files"){
df <- .self$getDataset(i, original_view = TRUE)
if(!is.null(df)){
df <- df[!is.na(file_info_name)]
if(nrow(df) != 0){
df <- unique(df[, list(study_accession, file_info_name)])
link_text <- ""
if(i == "gene_expression_files"){
link_text <- "gene_expression"
}else if( i == "fcs_sample_files"){
link_text <- "flow_cytometry"
}
links <- paste0(labkey.url.base, "/_webdav/", "/Studies/",
df$study_accession, "/%40files/rawdata/", link_text,
sapply(df$file_info_name, URLencode))
ret[[i]] <- res_table_maker(links_to_test = links, info_table = df, numrow = nrow(df), filetype = i)
}else{
print(paste0(i, " contains no links - i.e. 'File Info Name' col is all NA"))
}
}else{
print(paste0("No ", i, " found to test"))
}
#handle protocols alone
}else{
# if all studies, then pull links from folders list.  Assumption is that each SDY folder should have only one protocol.
if(.self$.isProject()){
folders_list <- labkey.getFolders(baseUrl = labkey.url.base, folderPath = "/Studies/")
studies <- unlist(folders_list[1])
studies <- studies [! studies %in% c("SDY_template","Studies")]
#if single study, then id study from the path from CreateConnection
}else{
studies <- strsplit(.self$config$labkey.url.path, "/")[[1]][3]
}
ret[[i]] <- res_table_maker(links_to_test = lapply(studies, make_protocol_link), info_table = studies, numrow = length(studies), filetype = i)
}
}
return(ret)
}
result <- test_files()
boo <- GET("www.immunespace.org/_webdav/Studies/SDY269/@files/protocols/SDY269_protocol.zip")
boo
ret_text <- content(boo, "text")
ret_text
boo <- GET("https://www.immunespace.org/_webdav/Studies/SDY269/@files/protocols/SDY269_protocol.zip")
ret_text <- content(boo, "text")
ret_text
library(Rlabkey)
boo <- GET("https://www.immunespace.org/_webdav/Studies/SDY269/@files/protocols/SDY269_protocol.zip")
ret_text <- content(boo, "text")
ret_text
GET("www.google.com")
boo <- GET("www.google.com")
ret_text <- content(boo, "text")
ret_text
.self <- CreateConnection("SDY269")
boo <- GET("https://www.immunespace.org/_webdav/Studies/SDY269/@files/protocols/SDY269_protocol.zip", authenticate("readonly@rglab.org","JFB4C9hJFB4C9h"))
boo
ret_text <- content(boo, "text")
ret_text
test_files=function(what = c("gene_expression_files", "fcs_sample_files", "protocol")){
#-----helper-functions--------
link_test <- function(link){
#url.exists() threw errors due to HTTP request related param values not being present at times, therefore using GET
info <- GET(link, authenticate("readonly@rglab.org","JFB4C9hJFB4C9h")
#status <- info$status_code
ret_text <- content(info, "text")
status <- grepl("Not Found", ret_text)
if(status == TRUE){
status <- 404
}else{
status <- 200
}
return(status)
}
make_protocol_link <- function(study){
link <- paste0(labkey.url.base, "/_webdav/Studies/",
study, "/%40files/protocols/", study,
"_protocol.zip")
return(link)
}
res_table_maker <- function(links_to_test, info_table, numrow, filetype){
http_status <- unlist(mclapply(links_to_test, link_test, mc.cores = detectCores()))
bound_res <- cbind(info_table,http_status)
num_good_links <- length(which(http_status == 200))
print(paste0(num_good_links, "/", numrow, " ", filetype, " with valid links."))
return(bound_res)
}
#Allow for both prod / test work by having baseUrl set through CreateConnection
labkey.url.base <- .self$config$labkey.url.base
print(paste0("testing on ", labkey.url.base))
ret <- list()
what <- tolower(what)
for(i in what){
# handle gene expr / fcs separately from protocols bc similar link construction
# note: error handling applies for single studies that may have no fcs / ge files
# or the files may not have any links in the file_info_name col
if(i == "gene_expression_files" | i == "fcs_sample_files"){
df <- .self$getDataset(i, original_view = TRUE)
if(!is.null(df)){
df <- df[!is.na(file_info_name)]
if(nrow(df) != 0){
df <- unique(df[, list(study_accession, file_info_name)])
link_text <- ""
if(i == "gene_expression_files"){
link_text <- "gene_expression"
}else if( i == "fcs_sample_files"){
link_text <- "flow_cytometry"
}
links <- paste0(labkey.url.base, "/_webdav/", "/Studies/",
df$study_accession, "/%40files/rawdata/", link_text,
sapply(df$file_info_name, URLencode))
ret[[i]] <- res_table_maker(links_to_test = links, info_table = df, numrow = nrow(df), filetype = i)
}else{
print(paste0(i, " contains no links - i.e. 'File Info Name' col is all NA"))
}
}else{
print(paste0("No ", i, " found to test"))
}
#handle protocols alone
}else{
# if all studies, then pull links from folders list.  Assumption is that each SDY folder should have only one protocol.
if(.self$.isProject()){
folders_list <- labkey.getFolders(baseUrl = labkey.url.base, folderPath = "/Studies/")
studies <- unlist(folders_list[1])
studies <- studies [! studies %in% c("SDY_template","Studies")]
#if single study, then id study from the path from CreateConnection
}else{
studies <- strsplit(.self$config$labkey.url.path, "/")[[1]][3]
}
ret[[i]] <- res_table_maker(links_to_test = lapply(studies, make_protocol_link), info_table = studies, numrow = length(studies), filetype = i)
}
}
return(ret)
}
test_files=function(what = c("gene_expression_files", "fcs_sample_files", "protocol")){
#-----helper-functions--------
link_test <- function(link){
#url.exists() threw errors due to HTTP request related param values not being present at times, therefore using GET
info <- GET(link, authenticate("readonly@rglab.org","JFB4C9hJFB4C9h")
#status <- info$status_code
ret_text <- content(info, "text")
status <- grepl("Not Found", ret_text)
if(status == TRUE){
status <- 404
}else{
status <- 200
}
return(status)
}
make_protocol_link <- function(study){
link <- paste0(labkey.url.base, "/_webdav/Studies/",
study, "/%40files/protocols/", study,
"_protocol.zip")
return(link)
}
res_table_maker <- function(links_to_test, info_table, numrow, filetype){
http_status <- unlist(mclapply(links_to_test, link_test, mc.cores = detectCores()))
bound_res <- cbind(info_table,http_status)
num_good_links <- length(which(http_status == 200))
print(paste0(num_good_links, "/", numrow, " ", filetype, " with valid links."))
return(bound_res)
}
#Allow for both prod / test work by having baseUrl set through CreateConnection
labkey.url.base <- .self$config$labkey.url.base
print(paste0("testing on ", labkey.url.base))
ret <- list()
what <- tolower(what)
for(i in what){
# handle gene expr / fcs separately from protocols bc similar link construction
# note: error handling applies for single studies that may have no fcs / ge files
# or the files may not have any links in the file_info_name col
if(i == "gene_expression_files" | i == "fcs_sample_files"){
df <- .self$getDataset(i, original_view = TRUE)
if(!is.null(df)){
df <- df[!is.na(file_info_name)]
if(nrow(df) != 0){
df <- unique(df[, list(study_accession, file_info_name)])
link_text <- ""
if(i == "gene_expression_files"){
link_text <- "gene_expression"
}else if( i == "fcs_sample_files"){
link_text <- "flow_cytometry"
}
links <- paste0(labkey.url.base, "/_webdav/", "/Studies/",
df$study_accession, "/%40files/rawdata/", link_text,
sapply(df$file_info_name, URLencode))
ret[[i]] <- res_table_maker(links_to_test = links, info_table = df, numrow = nrow(df), filetype = i)
}else{
print(paste0(i, " contains no links - i.e. 'File Info Name' col is all NA"))
}
}else{
print(paste0("No ", i, " found to test"))
}
#handle protocols alone
}else{
# if all studies, then pull links from folders list.  Assumption is that each SDY folder should have only one protocol.
if(.self$.isProject()){
folders_list <- labkey.getFolders(baseUrl = labkey.url.base, folderPath = "/Studies/")
studies <- unlist(folders_list[1])
studies <- studies [! studies %in% c("SDY_template","Studies")]
#if single study, then id study from the path from CreateConnection
}else{
studies <- strsplit(.self$config$labkey.url.path, "/")[[1]][3]
}
ret[[i]] <- res_table_maker(links_to_test = lapply(studies, make_protocol_link), info_table = studies, numrow = length(studies), filetype = i)
}
}
return(ret)
}
test_files=function(what = c("gene_expression_files", "fcs_sample_files", "protocol")){
#-----helper-functions--------
link_test <- function(link){
#url.exists() threw errors due to HTTP request related param values not being present at times, therefore using GET
info <- GET(link, authenticate("readonly@rglab.org","JFB4C9hJFB4C9h")
#status <- info$status_code
ret_text <- content(info, "text")
status <- grepl("Not Found", ret_text)
if(status == TRUE){
status <- 404
}else{
status <- 200
}
return(status)
}
make_protocol_link <- function(study){
link <- paste0(labkey.url.base, "/_webdav/Studies/",
study, "/%40files/protocols/", study,
"_protocol.zip")
return(link)
}
res_table_maker <- function(links_to_test, info_table, numrow, filetype){
http_status <- unlist(mclapply(links_to_test, link_test, mc.cores = detectCores()))
bound_res <- cbind(info_table,http_status)
num_good_links <- length(which(http_status == 200))
print(paste0(num_good_links, "/", numrow, " ", filetype, " with valid links."))
return(bound_res)
}
#Allow for both prod / test work by having baseUrl set through CreateConnection
labkey.url.base <- .self$config$labkey.url.base
print(paste0("testing on ", labkey.url.base))
ret <- list()
what <- tolower(what)
for(i in what){
# handle gene expr / fcs separately from protocols bc similar link construction
# note: error handling applies for single studies that may have no fcs / ge files
# or the files may not have any links in the file_info_name col
if(i == "gene_expression_files" | i == "fcs_sample_files"){
df <- .self$getDataset(i, original_view = TRUE)
if(!is.null(df)){
df <- df[!is.na(file_info_name)]
if(nrow(df) != 0){
df <- unique(df[, list(study_accession, file_info_name)])
link_text <- ""
if(i == "gene_expression_files"){
link_text <- "gene_expression"
}else if( i == "fcs_sample_files"){
link_text <- "flow_cytometry"
}
links <- paste0(labkey.url.base, "/_webdav/", "/Studies/",
df$study_accession, "/%40files/rawdata/", link_text,
sapply(df$file_info_name, URLencode))
ret[[i]] <- res_table_maker(links_to_test = links, info_table = df, numrow = nrow(df), filetype = i)
}else{
print(paste0(i, " contains no links - i.e. 'File Info Name' col is all NA"))
}
}else{
print(paste0("No ", i, " found to test"))
}
#handle protocols alone
}else{
# if all studies, then pull links from folders list.  Assumption is that each SDY folder should have only one protocol.
if(.self$.isProject()){
folders_list <- labkey.getFolders(baseUrl = labkey.url.base, folderPath = "/Studies/")
studies <- unlist(folders_list[1])
studies <- studies [! studies %in% c("SDY_template","Studies")]
#if single study, then id study from the path from CreateConnection
}else{
studies <- strsplit(.self$config$labkey.url.path, "/")[[1]][3]
}
ret[[i]] <- res_table_maker(links_to_test = lapply(studies, make_protocol_link), info_table = studies, numrow = length(studies), filetype = i)
}
}
return(ret)
}
test_files=function(what = c("gene_expression_files", "fcs_sample_files", "protocol")){
#-----helper-functions--------
link_test <- function(link){
#url.exists() threw errors due to HTTP request related param values not being present at times, therefore using GET
info <- GET(link, authenticate("readonly@rglab.org","JFB4C9hJFB4C9h")
#status <- info$status_code
ret_text <- content(info, "text")
status <- grepl("Not Found", ret_text)
if(status == TRUE){
status <- 404
}else{
status <- 200
}
return(status)
}
make_protocol_link <- function(study){
link <- paste0(labkey.url.base, "/_webdav/Studies/",
study, "/%40files/protocols/", study,
"_protocol.zip")
return(link)
}
res_table_maker <- function(links_to_test, info_table, numrow, filetype){
http_status <- unlist(mclapply(links_to_test, link_test, mc.cores = detectCores()))
bound_res <- cbind(info_table,http_status)
num_good_links <- length(which(http_status == 200))
print(paste0(num_good_links, "/", numrow, " ", filetype, " with valid links."))
return(bound_res)
}
#Allow for both prod / test work by having baseUrl set through CreateConnection
labkey.url.base <- .self$config$labkey.url.base
print(paste0("testing on ", labkey.url.base))
ret <- list()
what <- tolower(what)
for(i in what){
# handle gene expr / fcs separately from protocols bc similar link construction
# note: error handling applies for single studies that may have no fcs / ge files
# or the files may not have any links in the file_info_name col
if(i == "gene_expression_files" | i == "fcs_sample_files"){
df <- .self$getDataset(i, original_view = TRUE)
if(!is.null(df)){
df <- df[!is.na(file_info_name)]
if(nrow(df) != 0){
df <- unique(df[, list(study_accession, file_info_name)])
link_text <- ""
if(i == "gene_expression_files"){
link_text <- "gene_expression"
}else if( i == "fcs_sample_files"){
link_text <- "flow_cytometry"
}
links <- paste0(labkey.url.base, "/_webdav/", "/Studies/",
df$study_accession, "/%40files/rawdata/", link_text,
sapply(df$file_info_name, URLencode))
ret[[i]] <- res_table_maker(links_to_test = links, info_table = df, numrow = nrow(df), filetype = i)
}else{
print(paste0(i, " contains no links - i.e. 'File Info Name' col is all NA"))
}
}else{
print(paste0("No ", i, " found to test"))
}
#handle protocols alone
}else{
# if all studies, then pull links from folders list.  Assumption is that each SDY folder should have only one protocol.
if(.self$.isProject()){
folders_list <- labkey.getFolders(baseUrl = labkey.url.base, folderPath = "/Studies/")
studies <- unlist(folders_list[1])
studies <- studies [! studies %in% c("SDY_template","Studies")]
#if single study, then id study from the path from CreateConnection
}else{
studies <- strsplit(.self$config$labkey.url.path, "/")[[1]][3]
}
ret[[i]] <- res_table_maker(links_to_test = lapply(studies, make_protocol_link), info_table = studies, numrow = length(studies), filetype = i)
}
}
return(ret)
}
make_protocol_link <- function(study){
link <- paste0(labkey.url.base, "/_webdav/Studies/",
study, "/%40files/protocols/", study,
"_protocol.zip")
return(link)
}
link <- make_protocol_link("SDY400")
labkey.url.base <- "https://www.immunespace.org"
link <- make_protocol_link("SDY400")
link
library(httr)
GET("https://test.immunespace.org/_webdav/Studies/SDY416/%40files/protocols/SDY416_protocol.zip?method=PROPFIND&depth=0")
link
bah <- URLencode(Flu-phospho-9_08_10_Flu-phospho-9_08_10_Flu-Phospho-09,2f,08,2f,10_s_Patient_#94.536517.fcs)
bah <- URLencode("Flu-phospho-9_08_10_Flu-phospho-9_08_10_Flu-Phospho-09,2f,08,2f,10_s_Patient_#94.536517.fcs")
bah
boo <- curlEscape("Flu-phospho-9_08_10_Flu-phospho-9_08_10_Flu-Phospho-09,2f,08,2f,10_s_Patient_#94.536517.fcs")
library(RCurl)
boo <- curlEscape("Flu-phospho-9_08_10_Flu-phospho-9_08_10_Flu-Phospho-09,2f,08,2f,10_s_Patient_#94.536517.fcs")
boo
library(Rlabkey)
labkey.getSchemas(baseUrl = "https://www.immunespace.org" folderPath = "/")
labkey.getSchemas(baseUrl = "https://www.immunespace.org", folderPath = "/")
labkey.getSchemas(baseUrl = "https://www.immunespace.org", folderPath = "/labkeyDataSource")
bsid <- as.character(bs_to_id)
getwd()
setwd("/home/ehenrich/R/HIPCGeneModuleAnalysis")
eh_212 <- readRDS("/data/SDY212.rds")
eh_212 <- readRDS("data/SDY212.rds")
old_212 <- readRDS("data/Orig_files/SDY212_O.rds")
old_212 <- readRDS("data/Orig_Files/SDY212_O.rds")
diff(eh_212,old_212)
identical(eh_212,old_212)
all.equal(eh_212,old_212)
setNames(submatrix, names(sdytest))
